# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net


trigger:
- master

strategy:
  matrix:
      x64-release:
        variables:
          buildPlatform: 'x64'
          buildConfiguration: 'release'
      x64-debug:
        variables:
          buildPlatform: 'x64'
          buildConfiguration: 'debug'
      x86-release:
        variables:
          buildPlatform: 'x86'
          buildConfiguration: 'release'
      x86-debug:
        variables:
          buildPlatform: 'x86'
          buildConfiguration: 'debug'

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  # buildPlatform: 'x64'
  # buildConfiguration: 'release'

steps:
- script: |
    vcpkg install gtest:x64-windows
    vcpkg integrate install
  displayName: vcpkg

- task: NuGetToolInstaller@0
  displayName: 'Nuget - Install'

- task: VisualStudioTestPlatformInstaller@1
  inputs:
    packageFeedSelector: 'nugetOrg'
    versionSelector: 'latestPreRelease'
    
- task: NuGetCommand@2
  displayName: 'Nuget - Restore Packages'
  inputs:
    restoreSolution: '$(solution)'

- task: VSBuild@1
  inputs:
    solution: '$(solution)'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

- task: CmdLine@2
  displayName: 'Google Test  - run tests'
  inputs:
    script: '$(Build.SourcesDirectory)\$(BuildPlatform)\$(BuildConfiguration)\RStein.AsyncCpp.Test.exe --gtest_output="xml:$(Build.SourcesDirectory)\$(BuildPlatform)\$(BuildConfiguration)\RStein.AsyncCpp.Test.xml"'
- task: PublishTestResults@2
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: '**/RStein.AsyncCpp.Test.xml'

# - task: VSTest@2
#   inputs:
#     testSelector: 'testAssemblies'
#     testAssemblyVer2: '**\RStein.AsyncCpp.Test.exe'
#     searchFolder: '$(System.DefaultWorkingDirectory)'
# - task: VSTest@2
#   inputs:
#     platform: '$(buildPlatform)'
#     configuration: '$(buildConfiguration)'
    
# - task: CopyFiles@2
#   inputs:
#     Contents: '**\$(BuildConfiguration)\**\?(*.exe|*.dll|*.pdb)'
#     TargetFolder: 